generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  walletAddress        String                @id @unique
  worldIdHash          String?               @unique
  verificationLevel    String                @default("device")
  reputationScore      Int                   @default(0)
  reputationLevel      String                @default("Newcomer")
  totalTrades          Int                   @default(0)
  totalVolume          Float                 @default(0)
  lastActivity         DateTime              @default(now())
  isBanned             Boolean               @default(false)
  riskScore            Float                 @default(0)
  allocationCap        Float                 @default(100)
  usedAllocation       Float                 @default(0)
  marketCap            Float?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  antiManipulationLogs AntiManipulationLog[]
  createdTokens        Token[]               @relation("TokenCreator")
  trades               Trade[]
  achievements         UserAchievement[]
  reputationQuests     UserReputationQuest[]

  @@map("users")
}

model Token {
  address        String   @id @unique
  name           String
  symbol         String   @unique
  description    String
  imageUrl       String?
  creatorAddress String
  initialPrice   Float
  priceIncrement Float
  maxSupply      BigInt
  currentSupply  BigInt   @default(0)
  currentPrice   Float
  totalVolume    Float    @default(0)
  totalTrades    Int      @default(0)
  marketCap      Float    @default(0)
  status         String   @default("launching")
  launchDate     DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  creator        User     @relation("TokenCreator", fields: [creatorAddress], references: [walletAddress])
  trades         Trade[]

  @@map("tokens")
}

model Trade {
  id                String   @id @default(cuid())
  userAddress       String
  tokenAddress      String
  type              String
  amount            Float
  price             Float
  totalValue        Float
  blockNumber       BigInt?
  transactionHash   String?
  riskScore         Float    @default(0)
  isSuspicious      Boolean  @default(false)
  manipulationFlags String?
  createdAt         DateTime @default(now())
  token             Token    @relation(fields: [tokenAddress], references: [address])
  user              User     @relation(fields: [userAddress], references: [walletAddress])

  @@map("trades")
}

model ReputationQuest {
  id           String                @id @default(cuid())
  title        String
  description  String
  type         String
  targetValue  Float
  reward       Int
  isActive     Boolean               @default(true)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  userProgress UserReputationQuest[]

  @@map("reputation_quests")
}

model UserReputationQuest {
  id          String          @id @default(cuid())
  userAddress String
  questId     String
  progress    Float           @default(0)
  isCompleted Boolean         @default(false)
  completedAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  quest       ReputationQuest @relation(fields: [questId], references: [id])
  user        User            @relation(fields: [userAddress], references: [walletAddress])

  @@unique([userAddress, questId])
  @@map("user_reputation_quests")
}

model Achievement {
  id               String            @id @default(cuid())
  title            String
  description      String
  icon             String
  rarity           String
  requirements     String
  reward           Int
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userAddress   String
  achievementId String
  unlockedAt    DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userAddress], references: [walletAddress])

  @@unique([userAddress, achievementId])
  @@map("user_achievements")
}

model AntiManipulationLog {
  id           String    @id @default(cuid())
  userAddress  String
  activityType String
  riskScore    Float
  flags        String
  details      String?
  isResolved   Boolean   @default(false)
  resolvedAt   DateTime?
  resolvedBy   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userAddress], references: [walletAddress])

  @@map("anti_manipulation_logs")
}

model Session {
  id           String   @id @default(cuid())
  userAddress  String
  sessionToken String   @unique
  expiresAt    DateTime
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}
