// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  walletAddress         String   @unique
  worldIdHash          String?  @unique
  verificationLevel    String   @default("unverified")
  reputationScore      Int      @default(0)
  reputationLevel      String   @default("newbie")
  totalTrades          Int      @default(0)
  totalVolume          Float    @default(0)
  lastActivity         DateTime @default(now())
  isBanned             Boolean  @default(false)
  riskScore            Int      @default(0)
  allocationCap        Float    @default(1000)
  usedAllocation       Float    @default(0)
  marketCap            Float?
  walletCreationMethod String   @default("privy")
  isWorldIdVerified    Boolean  @default(false)
  walletCreatedAt      DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  tokens               Token[]
  trades               Trade[]
  chatMessages         ChatMessage[]
  chatRooms            ChatRoom[]
  reputationHistory    ReputationHistory[]

  @@map("users")
}

model Token {
  id              String   @id @default(cuid())
  name            String
  ticker          String   @unique
  logo            String?
  description     String?
  marketCap       Float    @default(0)
  ath             Float    @default(0)
  volume          Float    @default(0)
  txCount         Int      @default(0)
  isLive          Boolean  @default(false)
  timeSinceLaunch String?
  chartData       String?
  socialLinks     String?
  teamInfo        String?
  gradu8Story     String?
  repBreakdown    String?
  priceHistory    String?
  recentActivity  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  creator         User     @relation(fields: [creatorId], references: [id])
  creatorId       String
  trades          Trade[]

  @@map("tokens")
}

model Trade {
  id          String   @id @default(cuid())
  tokenId     String
  userId      String
  type        String   // 'buy' or 'sell'
  amount      Float
  tokenAmount Float
  price       Float
  timestamp   DateTime @default(now())

  // Relations
  token       Token    @relation(fields: [tokenId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("trades")
}

model ChatRoom {
  id              String   @id @default(cuid())
  name            String
  type            String   // 'public', 'private', 'dm', 'coin', 'group'
  description     String?
  repRequirement  Int?
  isLocked        Boolean  @default(false)
  membersCount    Int      @default(0)
  onlineCount     Int      @default(0)
  avatar          String?
  lastMessage     String?
  lastMessageTime DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  creator         User     @relation(fields: [creatorId], references: [id])
  creatorId       String
  messages        ChatMessage[]

  @@map("chat_rooms")
}

model ChatMessage {
  id                String   @id @default(cuid())
  roomId            String
  senderId          String
  message           String
  type              String   @default("text") // 'text', 'image', 'emoji'
  attachments       String?
  timestamp         DateTime @default(now())

  // Relations
  room              ChatRoom @relation(fields: [roomId], references: [id])
  sender            User     @relation(fields: [senderId], references: [id])

  @@map("chat_messages")
}

model ReputationHistory {
  id          String   @id @default(cuid())
  userId      String
  change      Int
  reason      String
  timestamp   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id])

  @@map("reputation_history")
}