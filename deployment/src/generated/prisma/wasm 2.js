
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.0
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.0",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  walletAddress: 'walletAddress',
  worldIdHash: 'worldIdHash',
  verificationLevel: 'verificationLevel',
  reputationScore: 'reputationScore',
  reputationLevel: 'reputationLevel',
  totalTrades: 'totalTrades',
  totalVolume: 'totalVolume',
  lastActivity: 'lastActivity',
  isBanned: 'isBanned',
  riskScore: 'riskScore',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TokenScalarFieldEnum = {
  address: 'address',
  name: 'name',
  symbol: 'symbol',
  description: 'description',
  imageUrl: 'imageUrl',
  creatorAddress: 'creatorAddress',
  initialPrice: 'initialPrice',
  priceIncrement: 'priceIncrement',
  maxSupply: 'maxSupply',
  currentSupply: 'currentSupply',
  currentPrice: 'currentPrice',
  totalVolume: 'totalVolume',
  totalTrades: 'totalTrades',
  status: 'status',
  launchDate: 'launchDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TradeScalarFieldEnum = {
  id: 'id',
  userAddress: 'userAddress',
  tokenAddress: 'tokenAddress',
  type: 'type',
  amount: 'amount',
  price: 'price',
  totalValue: 'totalValue',
  blockNumber: 'blockNumber',
  transactionHash: 'transactionHash',
  riskScore: 'riskScore',
  isSuspicious: 'isSuspicious',
  manipulationFlags: 'manipulationFlags',
  createdAt: 'createdAt'
};

exports.Prisma.ReputationQuestScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  targetValue: 'targetValue',
  reward: 'reward',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserReputationQuestScalarFieldEnum = {
  id: 'id',
  userAddress: 'userAddress',
  questId: 'questId',
  progress: 'progress',
  isCompleted: 'isCompleted',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  icon: 'icon',
  rarity: 'rarity',
  requirements: 'requirements',
  reward: 'reward',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  userAddress: 'userAddress',
  achievementId: 'achievementId',
  unlockedAt: 'unlockedAt'
};

exports.Prisma.AntiManipulationLogScalarFieldEnum = {
  id: 'id',
  userAddress: 'userAddress',
  activityType: 'activityType',
  riskScore: 'riskScore',
  flags: 'flags',
  details: 'details',
  isResolved: 'isResolved',
  resolvedAt: 'resolvedAt',
  resolvedBy: 'resolvedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userAddress: 'userAddress',
  sessionToken: 'sessionToken',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Token: 'Token',
  Trade: 'Trade',
  ReputationQuest: 'ReputationQuest',
  UserReputationQuest: 'UserReputationQuest',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  AntiManipulationLog: 'AntiManipulationLog',
  Session: 'Session'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/joaogameiro/Documents/miniapp/fair-launchpad-ui/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/joaogameiro/Documents/miniapp/fair-launchpad-ui/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.0",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// Anti-Bot Meme Coin Launchpad Database Schema\n// This schema supports human verification, anti-manipulation, and reputation systems\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// User model - Core user data with anti-manipulation tracking\nmodel User {\n  walletAddress     String   @id @unique\n  worldIdHash       String?  @unique\n  verificationLevel String   @default(\"device\") // device, document, orb\n  reputationScore   Int      @default(0)\n  reputationLevel   String   @default(\"Newcomer\")\n  totalTrades       Int      @default(0)\n  totalVolume       Float    @default(0)\n  lastActivity      DateTime @default(now())\n  isBanned          Boolean  @default(false)\n  riskScore         Float    @default(0)\n  createdAt         DateTime @default(now())\n  updatedAt         DateTime @updatedAt\n\n  // Relations\n  trades               Trade[]\n  createdTokens        Token[]               @relation(\"TokenCreator\")\n  reputationQuests     UserReputationQuest[]\n  achievements         UserAchievement[]\n  antiManipulationLogs AntiManipulationLog[]\n\n  @@map(\"users\")\n}\n\n// Token model - Meme coin token data\nmodel Token {\n  address        String  @id @unique\n  name           String\n  symbol         String  @unique\n  description    String\n  imageUrl       String?\n  creatorAddress String\n  creator        User    @relation(\"TokenCreator\", fields: [creatorAddress], references: [walletAddress])\n\n  // Bonding curve parameters\n  initialPrice   Float\n  priceIncrement Float\n  maxSupply      BigInt\n\n  // Current state\n  currentSupply BigInt @default(0)\n  currentPrice  Float\n  totalVolume   Float  @default(0)\n  totalTrades   Int    @default(0)\n\n  // Status\n  status     String   @default(\"launching\") // launching, active, completed, failed\n  launchDate DateTime @default(now())\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  // Relations\n  trades Trade[]\n\n  @@map(\"tokens\")\n}\n\n// Trade model - Individual trade records\nmodel Trade {\n  id           String @id @default(cuid())\n  userAddress  String\n  user         User   @relation(fields: [userAddress], references: [walletAddress])\n  tokenAddress String\n  token        Token  @relation(fields: [tokenAddress], references: [address])\n\n  // Trade details\n  type            String // buy, sell\n  amount          Float\n  price           Float\n  totalValue      Float\n  blockNumber     BigInt?\n  transactionHash String?\n\n  // Anti-manipulation\n  riskScore         Float   @default(0)\n  isSuspicious      Boolean @default(false)\n  manipulationFlags String? // JSON array of flags\n\n  createdAt DateTime @default(now())\n\n  @@map(\"trades\")\n}\n\n// Reputation Quest model - Quest definitions\nmodel ReputationQuest {\n  id          String   @id @default(cuid())\n  title       String\n  description String\n  type        String // trade, volume, time, social\n  targetValue Float\n  reward      Int // XP reward\n  isActive    Boolean  @default(true)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  // Relations\n  userProgress UserReputationQuest[]\n\n  @@map(\"reputation_quests\")\n}\n\n// User Reputation Quest model - User progress on quests\nmodel UserReputationQuest {\n  id          String          @id @default(cuid())\n  userAddress String\n  user        User            @relation(fields: [userAddress], references: [walletAddress])\n  questId     String\n  quest       ReputationQuest @relation(fields: [questId], references: [id])\n\n  progress    Float     @default(0)\n  isCompleted Boolean   @default(false)\n  completedAt DateTime?\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n\n  @@unique([userAddress, questId])\n  @@map(\"user_reputation_quests\")\n}\n\n// Achievement model - Achievement definitions\nmodel Achievement {\n  id           String   @id @default(cuid())\n  title        String\n  description  String\n  icon         String\n  rarity       String // common, rare, epic, legendary\n  requirements String // JSON object with requirements\n  reward       Int // XP reward\n  isActive     Boolean  @default(true)\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  // Relations\n  userAchievements UserAchievement[]\n\n  @@map(\"achievements\")\n}\n\n// User Achievement model - User earned achievements\nmodel UserAchievement {\n  id            String      @id @default(cuid())\n  userAddress   String\n  user          User        @relation(fields: [userAddress], references: [walletAddress])\n  achievementId String\n  achievement   Achievement @relation(fields: [achievementId], references: [id])\n\n  unlockedAt DateTime @default(now())\n\n  @@unique([userAddress, achievementId])\n  @@map(\"user_achievements\")\n}\n\n// Anti-Manipulation Log model - Suspicious activity tracking\nmodel AntiManipulationLog {\n  id          String @id @default(cuid())\n  userAddress String\n  user        User   @relation(fields: [userAddress], references: [walletAddress])\n\n  // Activity details\n  activityType String // trade, login, verification\n  riskScore    Float\n  flags        String // JSON array of risk flags\n  details      String? // Additional details\n  isResolved   Boolean   @default(false)\n  resolvedAt   DateTime?\n  resolvedBy   String? // Admin who resolved\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"anti_manipulation_logs\")\n}\n\n// Session model - User sessions for rate limiting\nmodel Session {\n  id           String   @id @default(cuid())\n  userAddress  String\n  sessionToken String   @unique\n  expiresAt    DateTime\n  isActive     Boolean  @default(true)\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  @@map(\"sessions\")\n}\n",
  "inlineSchemaHash": "88164510e3f2da269b238996ef123b77d8bec3ffbd6ede9e2970f6cb079098c0",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"walletAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"worldIdHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"verificationLevel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reputationScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"reputationLevel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalTrades\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalVolume\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"lastActivity\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isBanned\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"riskScore\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"trades\",\"kind\":\"object\",\"type\":\"Trade\",\"relationName\":\"TradeToUser\"},{\"name\":\"createdTokens\",\"kind\":\"object\",\"type\":\"Token\",\"relationName\":\"TokenCreator\"},{\"name\":\"reputationQuests\",\"kind\":\"object\",\"type\":\"UserReputationQuest\",\"relationName\":\"UserToUserReputationQuest\"},{\"name\":\"achievements\",\"kind\":\"object\",\"type\":\"UserAchievement\",\"relationName\":\"UserToUserAchievement\"},{\"name\":\"antiManipulationLogs\",\"kind\":\"object\",\"type\":\"AntiManipulationLog\",\"relationName\":\"AntiManipulationLogToUser\"}],\"dbName\":\"users\"},\"Token\":{\"fields\":[{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"symbol\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"creatorAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"creator\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TokenCreator\"},{\"name\":\"initialPrice\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"priceIncrement\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"maxSupply\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"currentSupply\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"currentPrice\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalVolume\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalTrades\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"launchDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"trades\",\"kind\":\"object\",\"type\":\"Trade\",\"relationName\":\"TokenToTrade\"}],\"dbName\":\"tokens\"},\"Trade\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TradeToUser\"},{\"name\":\"tokenAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"object\",\"type\":\"Token\",\"relationName\":\"TokenToTrade\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalValue\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"blockNumber\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"transactionHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"riskScore\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"isSuspicious\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"manipulationFlags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"trades\"},\"ReputationQuest\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"targetValue\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"reward\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userProgress\",\"kind\":\"object\",\"type\":\"UserReputationQuest\",\"relationName\":\"ReputationQuestToUserReputationQuest\"}],\"dbName\":\"reputation_quests\"},\"UserReputationQuest\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserReputationQuest\"},{\"name\":\"questId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"quest\",\"kind\":\"object\",\"type\":\"ReputationQuest\",\"relationName\":\"ReputationQuestToUserReputationQuest\"},{\"name\":\"progress\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"isCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"user_reputation_quests\"},\"Achievement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"icon\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rarity\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"requirements\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reward\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userAchievements\",\"kind\":\"object\",\"type\":\"UserAchievement\",\"relationName\":\"AchievementToUserAchievement\"}],\"dbName\":\"achievements\"},\"UserAchievement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserAchievement\"},{\"name\":\"achievementId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"achievement\",\"kind\":\"object\",\"type\":\"Achievement\",\"relationName\":\"AchievementToUserAchievement\"},{\"name\":\"unlockedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"user_achievements\"},\"AntiManipulationLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AntiManipulationLogToUser\"},{\"name\":\"activityType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"riskScore\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"flags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"details\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isResolved\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"resolvedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"resolvedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"anti_manipulation_logs\"},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"sessions\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

